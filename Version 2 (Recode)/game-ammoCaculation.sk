function game_ammoCaculation_increaseAmmo(player: player, weaponID: text, amount: number):
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	add {_amount} to {-weaponAmmo::%{_ammoID}%}

function game_ammoCaculation_reduceAmmo(player: player, weaponID: text, amount: number):
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	remove {_amount} from {-weaponAmmo::%{_ammoID}%}

function game_ammoCaculation_refillAmmo(player: player, weaponID: text, weaponStats: objects):
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	set {-weaponAmmo::%{_ammoID}%} to {_weaponStats::10}

function game_ammoCaculation_setAmmo(player: player, weaponID: text, ammoAmount: number):
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	set {-weaponAmmo::%{_ammoID}%} to {_ammoAmount}

function game_ammoCaculation_clearAmmo(player: player, weaponID: text):
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	set {-weaponAmmo::%{_ammoID}%} to 0

function game_ammoCaculation_checkAmmo(player: player, weaponID: text) :: number:
	set {_ammoID} to "%{_player}'s UUID%.%{_weaponID}%"
	set {_return} to (check [{-weaponAmmo::%{_ammoID}%} is set] ? {-weaponAmmo::%{_ammoID}%} : 0)
	return {_return}