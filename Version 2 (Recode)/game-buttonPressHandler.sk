function game_buttonPressHandler_rightButtonPress(player: player, gunID: text, gunStats: objects, pressAction: text):
	set {_pressID} to "%{_player}'s UUID%.RIGHT_BUTTON_DOWN"
	if {-buttonPress::%{_pressID}%} is not set:
		set {-buttonPress::%{_pressID}%} to 1
		set {_oldValue} to {-buttonPress::%{_pressID}%}
		game_buttonPressHandler_waitRightButtonRelease({_player}, {_gunID}, {_gunStats::*}, {_pressAction})
	else:
		add 1 to {-buttonPress::%{_pressID}%}
		set {_oldValue} to {-buttonPress::%{_pressID}%}
	wait 6 ticks
	if {-buttonPress::%{_pressID}%} is {_oldValue}:
		set {-buttonPress::%{_pressID}%} to -100

function game_buttonPressHandler_waitRightButtonRelease(player: player, gunID: text, gunStats: objects, pressAction: text):
	set {_pressID} to "%{_player}'s UUID%.RIGHT_BUTTON_DOWN"
	set {_playerSelectSlot} to (current hotbar slot of {_player})
	if {_pressAction} is "AUTO_FIRING":
		set {_delayBetweenBullets} to (4 / ({_gunStats::7} / 200))
	else if {_pressAction} is "USE_SCOPE":
		remove slowness from {_player}
		apply slowness 5 to {_player} for 9999999 seconds ambient false hide particle true
		game_playerDisplay_scopeDisplay({_player})
	while (true):
		if {-buttonPress::%{_pressID}%} is not set:
			exit 1 loop
		if {-buttonPress::%{_pressID}%} < 0:
			exit 1 loop
		if game_itemsHandler_getGunID({_player}'s tool) is not {_gunID}:
			exit 1 loop
		if {_pressAction} is "AUTO_FIRING":
			set {_playerTool} to ({_player}'s tool)
			set {_currentAmmoAmount} to game_ammoCaculation_checkAmmo({_player}, {_gunID})
			if {_currentAmmoAmount} <= 0:
				game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_playerTool}'s name), {_gunStats::*})
				game_reloadCaculation_startReload({_player}, {_gunID}, {_gunStats::*})
				exit 1 loop
			game_ammoCaculation_reduceAmmo({_player}, {_gunID}, 1)
			game_playerDisplay_gunItem({_player}, {_playerSelectSlot})
			game_playerDisplay_weaponDurability({_player}, {_playerSelectSlot}, (game_ammoCaculation_checkAmmo({_player}, {_gunID}) / {_gunStats::10} * 100))
			game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_playerTool}'s name), {_gunStats::*})
			game_bulletCaculation_registerBullet({_player}, ({_player}'s head), {_gunStats::*}, game_buttonPressHandler_getMaximumBulletDistance({_player}, {_gunStats::*}))
			game_playerDisplay_firingCooldown({_player}, ({_delayBetweenBullets} / 20))
			wait ("%{_delayBetweenBullets}% ticks" parsed as time span)
		else if {_pressAction} is "USE_SCOPE":
			wait 5 ticks
	delete {-buttonPress::%{_pressID}%}
	if {_pressAction} is "USE_SCOPE":
		remove slowness from {_player}

function game_buttonPressHandler_leftButtonPress(player: player, gunID: text, gunStats: objects, pressAction: text):
	set {_pressID} to "%{_player}'s UUID%.LAST_FIRING"
	set {_rightPressID} to "%{_player}'s UUID%.RIGHT_BUTTON_DOWN"
	set {_playerSelectSlot} to (current hotbar slot of {_player})
	set {_delayBetweenNextFiring} to (4 / ({_gunStats::7} / 200))
	if (difference between now and {-lastFiring::%{_pressID}%}) < ("%{_delayBetweenNextFiring}% ticks" parsed as time span):
		stop
	set {-lastFiring::%{_pressID}%} to now
	game_playerDisplay_firingCooldown({_player}, ({_delayBetweenNextFiring} / 20))
	set {_currentAmmoAmount} to game_ammoCaculation_checkAmmo({_player}, {_gunID})
	if {_pressAction} is "SEMI_FIRING":
		if {_currentAmmoAmount} > 0:
			game_ammoCaculation_reduceAmmo({_player}, {_gunID}, 1)
			game_playerDisplay_gunItem({_player}, {_playerSelectSlot})
			game_playerDisplay_weaponDurability({_player}, {_playerSelectSlot}, (game_ammoCaculation_checkAmmo({_player}, {_gunID}) / {_gunStats::10} * 100))
			game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})
			if {-buttonPress::%{_rightPressID}%} is not set:
				set {_gunStats::6} to ({_gunStats::6} * 0.6)
			game_bulletCaculation_registerBullet({_player}, ({_player}'s head), {_gunStats::*}, game_buttonPressHandler_getMaximumBulletDistance({_player}, {_gunStats::*}))
	else if {_pressAction} is "BURST_FIRING":
		loop {_gunStats::5} times:
			if {_currentAmmoAmount} > 0:
				game_ammoCaculation_reduceAmmo({_player}, {_gunID}, 1)
				game_playerDisplay_gunItem({_player}, {_playerSelectSlot})
				game_playerDisplay_weaponDurability({_player}, {_playerSelectSlot}, (game_ammoCaculation_checkAmmo({_player}, {_gunID}) / {_gunStats::10} * 100))
				game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})
				if {-buttonPress::%{_rightPressID}%} is not set:
					set {_gunStats::6} to ({_gunStats::6} * 0.2)
				game_bulletCaculation_registerBullet({_player}, ({_player}'s head), {_gunStats::*}, game_buttonPressHandler_getMaximumBulletDistance({_player}, {_gunStats::*}))
				if loop-number is not {_gunStats::5}:
					wait 2 ticks
	if game_ammoCaculation_checkAmmo({_player}, {_gunID}) <= 0:
		wait 5 ticks
		game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})
		game_reloadCaculation_startReload({_player}, {_gunID}, {_gunStats::*})

function game_buttonPressHandler_rightButtonPressing(player: player) :: boolean:
	set {_pressID} to "%{_player}'s UUID%.RIGHT_BUTTON_DOWN"
	if {-buttonPress::%{_pressID}%} is set:
		return true
	return false

function game_buttonPressHandler_getMaximumBulletDistance(player: player, gunStats: objects) :: number:
	set {_playerTargetBlock} to ({_player}'s targeted block)
	set {_maximumDistance} to (check [{_playerTargetBlock} is set] ? (distance between {_player}'s head and {_playerTargetBlock}) : {_gunStats::3})
	set {_maximumDistance} to (check [{_maximumDistance} <= {_gunStats::3}] ? {_maximumDistance} : {_gunStats::3})
	return {_maximumDistance}