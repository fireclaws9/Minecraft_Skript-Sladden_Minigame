function game_bulletCaculation_registerBullet(shooter: player, bulletSpawnLocation: location, gunStats: objects, bulletMaximumRange: number):
	if {_gunStats::4} > 0:
		set {_bulletAmount} to {_gunStats::4}
	else:
		set {_bulletAmount} to 1
	loop {_bulletAmount} times:
		set {_accuracyAppliedSpawnLocation} to game_bulletCaculation_applyAccuracy({_bulletSpawnLocation}, {_gunStats::6})
		game_bulletCaculation_caculateBullet({_shooter}, {_accuracyAppliedSpawnLocation}, {_gunStats::*}, {_bulletMaximumRange})
	set {_shooterTool} to ({_shooter}'s tool)
	set {_bulletSoundData::*} to game_bulletCaculation_getFiringSound(game_itemsHandler_getGunType({_shooterTool}))
	play sound {_bulletSoundData::1} with volume 4 and pitch {_bulletSoundData::2} at ({_shooter}'s location) for all players
	game_playerDisplay_exposePlayer({_shooter}, 5)
		

function game_bulletCaculation_caculateBullet(shooter: player, bulletSpawnLocation: location, gunStats: objects, bulletMaximumRange: number):
	set {_hitEntityDistance} to {_bulletMaximumRange}
	loop all zombies and players:
		if loop-entity is {_shooter}:
			set {_invalidDetection} to true
		else if game_damageCaculation_IsVulnerable(loop-entity) is false:
			set {_invalidDetection} to true
		if {_invalidDetection} is not set:
			set {_entityLocation} to location of loop-entity
			add (distance between {_bulletSpawnLocation} and location 1.9 meters above {_entityLocation}) to {_predictBulletRange::*}
			add (distance between {_bulletSpawnLocation} and location 1 meter above {_entityLocation}) to {_predictBulletRange::*}
			add (distance between {_bulletSpawnLocation} and {_entityLocation}) to {_predictBulletRange::*}
			if {_predictBulletRange::3} <= {_bulletMaximumRange}:
				loop {_predictBulletRange::*}:
					set {_loopBulletLocation} to location {_predictBulletRange::%loop-index%} meters infront of {_bulletSpawnLocation}
					if {_predictBulletRange::%loop-index%} < {_hitEntityDistance}:
						if game_bulletCaculation_checkHitbox({_loopBulletLocation}, {_entityLocation}, "ALL") is true:
							set {_hitEntityDistance} to {_predictBulletRange::%loop-index%}
							set {_hitEntity} to loop-entity
							if game_bulletCaculation_checkHitbox({_loopBulletLocation}, {_entityLocation}, "HEAD") is true:
								set {_hitHead} to true
							else:
								set {_hitHead} to false
							exit 1 loop
			delete {_predictBulletRange::*}
			delete {_hitLocation}
		delete {_invalidDetection}
	game_bulletCaculation_drawBullet({_bulletSpawnLocation}, {_hitEntityDistance})
	if {_hitEntity} is set:
		game_damageCaculation_damagePlayer({_shooter}, {_hitEntity}, game_bulletCaculation_caculateBulletDamage({_gunStats::*}, {_hitEntityDistance}, {_hitHead}), "GUN_DAMAGE", ({_hitHead} ? "HEADSHOT" : ""))

function game_bulletCaculation_caculateBulletDamage(gunStats: objects, hitRange: number, isHeadshot: boolean = false) :: number:
	set {_rangePercentage} to (1 - ({_hitRange} / {_gunStats::3}))
	set {_rangePercentage} to (check [{_rangePercentage} >= 0.8] ? {_rangePercentage} : 0.8)
	set {_rangeDamage} to ({_gunStats::1} * {_rangePercentage})
	if {_isHeadshot} is true:
		set {_rangeDamage} to ({_rangeDamage} * {_gunStats::2})
	return {_rangeDamage}

function game_bulletCaculation_drawBullet(bulletSpawnLocation: location, bulletRange: number):
	loop 10 times:
		drawDot particle "fireworkspark", center (location (loop-number * ({_bulletRange} / 10) - 1) meters infront {_bulletSpawnLocation}), visibleRange 100

function game_bulletCaculation_checkHitbox(bulletLocation: location, victimLocation: location, checkType: text) :: boolean:
	set {_inHitBox} to true
	if abs(({_victimLocation}'s x coords) - ({_bulletLocation}'s x coords)) > 0.5:
		set {_inHitBox} to false
	if abs(({_victimLocation}'s z coords) - ({_bulletLocation}'s z coords)) > 0.5:
		set {_inHitBox} to false
	if {_checkType} is "ALL":
		set {_checkCenter} to location 1 meter above {_victimLocation}
		set {_checkRange} to 1
	else if {_checkType} is "HEAD":
		set {_checkCenter} to location 1.6875 meters above {_victimLocation}
		set {_checkRange} to 0.3125
	if abs(({_checkCenter}'s y coords) - ({_bulletLocation}'s y coords)) > {_checkRange}:
		set {_inHitBox} to false
	return {_inHitBox}

function game_bulletCaculation_applyAccuracy(bulletLocation: location, accuracy: number) :: location:
	set {_randomSpread} to ((random number between 0 and 10) * ((100 - {_accuracy}) / 100))
	set {_randomAngle} to (random number between 1 and 360)
	set {_yawChange} to (cos({_randomAngle}) * {_randomSpread})
	set {_pitchChange} to (sin({_randomAngle}) * {_randomSpread})
	set {_bulletLocation}'s yaw to (({_bulletLocation}'s yaw) + {_yawChange})
	set {_bulletLocation}'s pitch to (({_bulletLocation}'s pitch) + {_pitchChange})
	return {_bulletLocation}

function game_bulletCaculation_getFiringSound(gunType: text) :: objects:
	if {_gunType} is "SHOTGUN":
		add "entity.zombie.break_door_wood" to {_return::*}
		add 1.8 to {_return::*}
	else if {_gunType} is "SNIPER_RIFLE":
		add "entity.generic.explode" to {_return::*}
		add 2 to {_return::*}
	else:
		add "entity.irongolem.hurt" to {_return::*}
		add 2 to {_return::*}
	return {_return::*}