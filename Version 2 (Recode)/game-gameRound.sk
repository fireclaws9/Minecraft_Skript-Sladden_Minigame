every 1 second:
	game_gameRound_defaultSetting()
	set {_gamePlayers::*} to game_gameRound_getInGamePlayers()
	if {-gameSystem::gameStatus} is "GAMESTATUS_WAITING":
		if (amount of {_gamePlayers::*}) >= 2:
			game_gameRound_changeStatus("GAMESTATUS_STARTING", 16)
		else if {-gameSystem::gameTimer} <= 0:
			game_gameRound_changeStatus("GAMESTATUS_WAITING", 30)
			game_gameRound_sendInGame("&cThe game require at least 2 players to start!")
	else if {-gameSystem::gameStatus} is "GAMESTATUS_STARTING":
		if (amount of {_gamePlayers::*}) < 2:
			game_gameRound_changeStatus("GAMESTATUS_WAITING", 30)
			game_gameRound_sendInGame("&cWe don't have enough players! Game starting has been canceled.")
			stop
		if {-gameSystem::gameTimer} is 15 or 10 or 5 or 3 or 4 or 2 or 1:
			game_gameRound_sendInGame("&eThe game is starting in &c%{-gameSystem::gameTimer}% &eseconds!")
		else if {-gameSystem::gameTimer} <= 0:
			game_gameRound_changeStatus("GAMESTATUS_STARTED", 300)
			game_gameRound_sendInGame("&aThe game has started!")
			game_gameRound_gameStart()
	else if {-gameSystem::gameStatus} is "GAMESTATUS_STARTED":
		if {-gameSystem::gameTimer} <= 0:
			game_gameRound_changeStatus("GAMESTATUS_ENDING", 5)
			game_gameRound_sendInGame("&cThe game has ended!")
			game_gameRound_gameEnd()
	else if {-gameSystem::gameStatus} is "GAMESTATUS_ENDING":
		if {-gameSystem::gameTimer} <= 0:
			game_gameRound_changeStatus("GAMESTATUS_WAITING", 30)
	remove 1 from {-gameSystem::gameTimer}

function game_gameRound_gameStart():
	set {-gameSystem::gameMap} to (check [{-gameSystem::gameMap} is not "GAMEMAP_RANDOM"] ? {-gameSystem::gameMap} : game_gameData_getRandomMapID())
	set {-gameSystem::gameMode} to (check [{-gameSystem::gameMode} is not "GAMEMODE_RANDOM"] ? {-gameSystem::gameMode} : game_gameRound_getRandomGamemode())
	game_gameRound_sendInGame("&eThe gamemode for this round is &6%game_gameRound_getGameStatDisplay({-gameSystem::gameMode}, false)%&e.")
	set {_gamePlayers::*} to game_gameRound_getInGamePlayers()
	if {-gameSystem::gameMode} is "GAMEMODE_FREEFORALL":
		add "FFA" to {_teams::*}
		game_gameTeams_setTeamColor("FFA", "&a", GRAY)
	else if {-gameSystem::gameMode} is "GAMEMODE_TEAMDEATHMATCH":
		add "RED" and "BLUE" to {_teams::*}
		game_gameTeams_setTeamColor("RED", "&c", RED)
		game_gameTeams_setTeamColor("BLUE", "&9", BLUE)
		set {-gameSystem::teamKills::RED} to 0
		set {-gameSystem::teamKills::BLUE} to 0
	game_gameTeams_addPlayersToTeams({_gamePlayers::*}, {_teams::*})
	loop {_gamePlayers::*}:
		game_gameRound_setupPlayer({_gamePlayers::%loop-index%})
	game_playerDisplay_sendAllCurrentTeamPlayers()

function game_gameRound_gameEnd():
	game_gameRound_gameShowWinner()
	set {_gamePlayers::*} to game_gameRound_getInGamePlayers()
	loop {_gamePlayers::*}:
		game_gameRound_resetPlayer({_gamePlayers::%loop-index%})
	game_gameRound_defaultSetting(true)
	game_gameTeams_clearTeamData()
	game_gameRound_resetRoundDeathsKills()
	kill all armor stands

function game_gameRound_defaultSetting(forceSetData: boolean = false):
	set {-gameSystem::gameStatus} to (check [{_forceSetData} is true] ? "GAMESTATUS_WAITING" : (check [{-gameSystem::gameStatus} is set] ? {-gameSystem::gameStatus} : "GAMESTATUS_WAITING"))
	set {-gameSystem::gameMode} to (check [{_forceSetData} is true] ? "GAMEMODE_RANDOM" : (check [{-gameSystem::gameMode} is set] ? {-gameSystem::gameMode} : "GAMEMODE_RANDOM"))
	set {-gameSystem::gameMap} to (check [{_forceSetData} is true] ? "GAMEMAP_RANDOM" : (check [{-gameSystem::gameMap} is set] ? {-gameSystem::gameMap} : "GAMEMAP_RANDOM"))
	set {-gameSystem::gameTimer} to (check [{_forceSetData} is true] ? 5 : (check [{-gameSystem::gameTimer} is set] ? {-gameSystem::gameTimer} : 5))

function game_gameRound_setupPlayer(player: player, resetRoundStats: boolean = true):
	game_gameRound_teleportRandomSpawn({_player})
	game_playerLoadout_playerLoadoutInventory({_player})
	game_damageCaculation_healPlayer({_player}, 100)
	if {_resetRoundStats} is true:
		set {-gameSystem::playerKills::%{_player}%} to 0
		set {-gameSystem::playerDeaths::%{_player}%} to 0
	game_playerDisplay_updateTablist({_player})
	game_ammoCaculation_setAmmo({_player}, "GRENADE", 3)
	game_movementSpeedHandler_updatePlayerMovementSpeed({_player})
	set {_player}'s hunger to 10

function game_gameRound_resetPlayer(player: player):
	game_damageCaculation_setInvulnerable({_player})
	clear {_player}'s inventory
	teleport {_player} to {-gameSystem::lobbySpawn}
	delete {-gameSystem::playerKills::%{_player}%}
	delete {-gameSystem::playerDeaths::%{_player}%}
	game_playerDisplay_updateTablist({_player})
	game_movementSpeedHandler_updatePlayerMovementSpeed({_player})

function game_gameRound_resetRoundDeathsKills():
	delete {-gameSystem::playerKills::*}
	delete {-gameSystem::playerDeaths::*}

function game_gameRound_teleportRandomSpawn(player: player):
	set {_playerTeleportLocation} to game_gameData_getRandomMapSpawnLocation({-gameSystem::gameMap})
	teleport {_player} to {_playerTeleportLocation}

function game_gameRound_changeStatus(newStatus: text, newTimer: number = 0):
	set {-gameSystem::gameTimer} to {_newTimer}
	set {-gameSystem::gameStatus} to {_newStatus}

function game_gameRound_sendInGame(message: text):
	set {_gamePlayers::*} to game_gameRound_getInGamePlayers()
	send {_message} to {_gamePlayers::*}

function game_gameRound_playerJoin(player: player):
	set {_playerUUID} to ({_player}'s UUID)
	set {-gameSystem::gamePlayers::%{_playerUUID}%} to now
	send "&aYou joined the game!" to {_player}
	if {-gameSystem::gameStatus} is "GAMESTATUS_STARTED":
		if {-gameSystem::gameMode} is "GAMEMODE_FREEFORALL":
			add "FFA" to {_teams::*}
		else if {-gameSystem::gameMode} is "GAMEMODE_TEAMDEATHMATCH":
			add "RED" and "BLUE" to {_teams::*}
		game_gameTeams_addPlayerToEqualTeams({_player}, {_teams::*})
		game_gameRound_setupPlayer({_player})
	else:
		game_gameRound_resetPlayer({_player})

function game_gameRound_playerLeave(player: player):
	set {_playerUUID} to ({_player}'s UUID)
	delete {-gameSystem::gamePlayers::%{_playerUUID}%}
	send "&cYou left the game!" to {_player}
	game_gameRound_resetPlayer({_player})

function game_gameRound_checkPlayerInGame(player: player) :: boolean:
	set {_playerUUID} to ({_player}'s UUID)
	return (check [{-gameSystem::gamePlayers::%{_playerUUID}%} is set])

function game_gameRound_getInGamePlayers() :: players:
	loop all players:
		set {_loopPlayerUUID} to (loop-player's UUID)
		if {-gameSystem::gamePlayers::%{_loopPlayerUUID}%} is set:
			add loop-player to {_gamePlayers::*}
	return {_gamePlayers::*}

function game_gameRound_getRandomGamemode() :: text:
	add "GAMEMODE_FREEFORALL" and "GAMEMODE_TEAMDEATHMATCH" to {_gamemodes::*}
	set {_randomGamemodeNum} to floor(random integer between 1 and ((amount of {_gamemodes::*}) * 100) / 100)
	return {_gamemodes::%{_randomGamemodeNum}%}

function game_gameRound_getGameStatDisplay(value: text, shortDisplay: boolean = false) :: text:
	if {_value} is "GAMEMODE_RANDOM":
		return "Random"
	else if {_value} is "GAMESTATUS_WAITING":
		return "Waiting"
	else if {_value} is "GAMESTATUS_STARTING":
		return "Starting"
	else if {_value} is "GAMESTATUS_STARTED":
		return "Started"
	else if {_value} is "GAMESTATUS_ENDING":
		return "Ending"
	else if {_value} is "GAMEMODE_FREEFORALL":
		if {_shortDisplay} is true:
			return "FFA"
		return "Free For All"
	else if {_value} is "GAMEMODE_TEAMDEATHMATCH":
		if {_shortDisplay} is true:
			return "TDM"
		return "Team Deathmatch"

function game_gameRound_getMostKillsPlayer() :: offline player:
	set {_mostKills} to -1
	loop {-gameSystem::playerKills::*}:
		if {-gameSystem::playerKills::%loop-index%} > {_mostKills}:
			set {_mostKills} to {-gameSystem::playerKills::%loop-index%}
			set {_mostKillsPlayer} to loop-index
	return ({_mostKillsPlayer} parsed as offline player)

function game_gameRound_gameShowWinner():
	if {-gameSystem::gameMode} is "GAMEMODE_FREEFORALL":
		send "%nl%&6%game_gameRound_getMostKillsPlayer()% &ehas won the game!%nl%" to all players		
	else if {-gameSystem::gameMode} is "GAMEMODE_TEAMDEATHMATCH":
		if {-gameSystem::teamKills::RED} > {-gameSystem::teamKills::BLUE}:
			send "%nl%&cRED TEAM &ehas won the game!%nl%" to all players
		else if {-gameSystem::teamKills::BLUE} > {-gameSystem::teamKills::RED}:
			send "%nl%&9BLUE TEAM &ehas won the game!%nl%" to all players
		else:
			send "%nl%&eThe game ended in &6STALEMATE&e!%nl%" to all players

function game_gameRound_markLocation(center: location, radius: number, dots: number):
	set {_y} to ({_center}'s y coords)
	loop {_dots} times:
		set {_degree} to (loop-number * (360 / {_dots}))
		set {_x} to ((cos({_degree}) * {_radius}) + ({_center}'s x coords))
		set {_z} to ((sin({_degree}) * {_radius}) + ({_center}'s z coords))
		set {_dotLocation} to location at ({_x}, {_y}, {_z}) in ({_center}'s world)
		drawDot particle "flame", center {_dotLocation}, visibleRange 100