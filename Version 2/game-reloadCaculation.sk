# RELOAD SOUND ID
# [START SOUND (ID)]:[START TIMES]:[START DELAY (SPLIT BY "_")],[RELOADING SOUND (ID) (SHOTGUN ONLY)],[END SOUND (ID)]:[END TIMES]:[END DELAY (SPLIT BY "_")]

function game_reloadCaculation_startReload(player: player, gunID: text, gunStats: objects):
	if  {-isReloading::%{_player}%} is set:
		stop
	if game_ammoCaculation_checkAmmo({_player}, {_gunID}) >= {_gunStats::10}:
		stop
	set {-isReloading::%{_player}%} to {_gunID}
#	send "&eReloading..." to {_player}
	send "&7&oʀᴇʟᴏᴀᴅɪɴɢ..." to {_player}
	set {_reloadFinshTime} to now
	add ("%{_gunStats::8}% seconds" parsed as time span) to {_reloadFinshTime}
	game_reloadCaculation_reloadSound({_player}, {_gunID}, {_gunStats::*}, 1, "block.iron_door.open")
	set {_reloadingSoundData::*} to game_reloadCaculation_getReloadSoundData({_gunStats::*}, 2)
	game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})
	while (true):
		set {_playerTool} to {_player}'s tool
		set {_currentGunID} to game_itemsHandler_getGunID({_playerTool})
		if {_gunID} is not {_currentGunID}:
			send "&c&oᴄᴀɴᴄᴇʟᴇᴅ!" to {_player}
			exit 1 loop
		if {_reloadFinshTime} <= now:
			game_ammoCaculation_refillAmmo({_player}, {_gunID}, {_gunStats::*})
#			send "&aYou have successfully reloaded your gun!" to {_player}
			send "&a&oʀᴇʟᴏᴀᴅᴇᴅ!" to {_player}
			exit 1 loop
		if game_itemsHandler_getGunType({_playerTool}) is "SHOTGUN":
			set {_waitTicks} to round({_gunStats::8} * 20 / {_gunStats::10})
			wait ("%{_waitTicks}% ticks" parsed as time span)
			game_ammoCaculation_increaseAmmo({_player}, {_gunID}, 1)
			game_playerLoadout_playerLoadoutInventory_specific({_player}, (current hotbar slot of {_player}))
			game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})
			if {_reloadingSoundData::1} is 1:
				play sound "entity.irongolem.attack" with volume 99999 and pitch 1 at ({_player}'s location) for {_player}
			if game_ammoCaculation_checkAmmo({_player}, {_gunID}) >= {_gunStats::10}:
#				send "&aYou have successfully reloaded your gun!" to {_player}
				send "&a&oʀᴇʟᴏᴀᴅᴇᴅ!" to {_player}
				exit 1 loop
		else:
			wait 2 ticks
	delete {-isReloading::%{_player}%}
	if {-gameSystem::gameStatus} is "GAMESTATUS_STARTED":
		game_playerLoadout_playerLoadoutInventory({_player})
		game_reloadCaculation_reloadSound({_player}, {_gunID}, {_gunStats::*}, 3, "block.piston.contract")
		game_playerDisplay_firingAmmo({_player}, {_gunID}, ({_player}'s tool's name), {_gunStats::*})

function game_reloadCaculation_isReloading(player: player) :: boolean:
	return (check [{-isReloading::%{_player}%} is set])

function game_reloadCaculation_reloadSound(player: player, gunID: text, gunStats: objects, soundStage: number, sounds: texts):
	set {_startReloadSoundData::*} to game_reloadCaculation_getReloadSoundData({_gunStats::*}, {_soundStage})
	loop {_startReloadSoundData::2} times:
		if {-isReloading::%{_player}%} is not set:
			stop
		play sound {_sounds::%{_startReloadSoundData::1}%} with volume 99999 and pitch 2 at ({_player}'s location) for {_player}
		if loop-number is not {_startReloadSoundData::2}:
			set {_reloadDelayID} to (2 + loop-number)
			wait ("%{_startReloadSoundData::%{_reloadDelayID}%}% ticks" parsed as time span)

function game_reloadCaculation_getReloadSoundData(gunStats: objects, soundStage: number) :: numbers:
	set {_reloadSoundData::*} to {_gunStats::9} split by ","
	set {_targetReloadSoundData::*} to {_reloadSoundData::%{_soundStage}%} split by ":"
	set {_splitSoundDelay::*} to {_targetReloadSoundData::3} split by "_"
	if (amount of {_targetReloadSoundData::*}) is 3:
		loop 2 times:
			set {_targetReloadSoundData::%loop-number%} to ({_targetReloadSoundData::%loop-number%} parsed as number)
		loop (amount of {_splitSoundDelay::*}) times:
			add ({_splitSoundDelay::%loop-number%} parsed as number) to {_targetReloadSoundData::*}
	else:
		add ({_targetReloadSoundData::1} parsed as number) to {_targetReloadSoundData::*}
	return {_targetReloadSoundData::*}