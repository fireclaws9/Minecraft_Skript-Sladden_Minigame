on script load:
	loop all players:
		game_playerDisplay_sidebarDisplay_newSidebar(loop-player)

function game_playerDisplay_sidebarDisplay_newSidebar(player: player):
	delete {-sidebarLoaded::%{_player}%}
	set {_sidebarID} to "PLAYER_SIDEBAR_%{_player}'s UUID%"
	delete stylish scoreboard {_sidebarID}
	create stylish scoreboard named {_sidebarID}
	set title of stylish scoreboard {_sidebarID} to "&6&lSLADDEN"
	loop 15 times:
		create a new id based score "%{_sidebarID}%_LINE_%(16 - loop-number)%" with text "LINE_%(16 - loop-number)%" slot (16 - loop-number) for stylish scoreboard {_sidebarID}
	set {_player}'s stylish scoreboard to {_sidebarID}
	set {-sidebarLoaded::%{_player}%} to true
	game_playerDisplay_sidebarDisplay_updateSidebarAll()

function game_playerDisplay_sidebarDisplay_updateSidebarAll():
	set {_globalStatus} to game_gameRound_getGameStatDisplay({-gameSystem::gameStatus})
	set {_globalCountdown} to game_numberDisplayHandler_getTimeDisplay({-gameSystem::gameTimer})
	set {_globalGamemode} to game_gameRound_getGameStatDisplay({-gameSystem::gameMode}, true)
	set {_globalMap} to {-gameSystem::gameMapName::%{-gameSystem::gameMap}%}
	if {-gameSystem::gameMode} is "GAMEMODE_FREEFORALL":
		set {_mostKills} to game_gameRound_getMostKillsPlayer()
		set {_globalFreeForAllMostKills} to (check [{_mostKills} is set] ? "&f%{_mostKills}% &a(&f%{-gameSystem::playerKills::%{_mostKills}%}% Kills&a)" : "&cnull &a(&f0 Kills&a)")
	loop all players:
		if {-sidebarLoaded::%loop-player%} is set:
			set {_sidebarID} to "PLAYER_SIDEBAR_%loop-player's UUID%"	
			set text of id "%{_sidebarID}%_LINE_15" to "&7%now%"
			set text of id "%{_sidebarID}%_LINE_14" to "&1&f"
			set text of id "%{_sidebarID}%_LINE_13" to "&1&e▍ Status: &f%{_globalStatus}%"
			set text of id "%{_sidebarID}%_LINE_12" to "&2&e▍ Countdown: &f%{_globalCountdown}%"
			set text of id "%{_sidebarID}%_LINE_11" to "&2&f"
			if {-gameSystem::gameStatus} is "GAMESTATUS_WAITING":
				set text of id "%{_sidebarID}%_LINE_10" to "&1&e▍ The game require"
				set text of id "%{_sidebarID}%_LINE_9" to "&2&e▍ at least &f2 players"
				set text of id "%{_sidebarID}%_LINE_8" to "&3&e▍ to start!"
				set text of id "%{_sidebarID}%_LINE_7" to "&4&7▍ &f"
			else if {-gameSystem::gameStatus} is not "GAMESTATUS_STARTED":
				set text of id "%{_sidebarID}%_LINE_10" to "&1&7▍ &f"
				set text of id "%{_sidebarID}%_LINE_9" to "&2&7▍ &f"
				set text of id "%{_sidebarID}%_LINE_8" to "&3&7▍ &f"
				set text of id "%{_sidebarID}%_LINE_7" to "&4&7▍ &f"
			else:
				set text of id "%{_sidebarID}%_LINE_10" to "&1&e▍ Gamemode: &f%{_globalGamemode}%"
				set text of id "%{_sidebarID}%_LINE_9" to "&2&e▍ Map: &f%{_globalMap}%"
				if {-gameSystem::gameMode} is "GAMEMODE_FREEFORALL":
					set text of id "%{_sidebarID}%_LINE_8" to "&3&a▍ ##1 Kills: %{_globalFreeForAllMostKills}%"
					set {_playerKillsDisplay} to (check [{-gameSystem::playerKills::%loop-player%} is set] ? {-gameSystem::playerKills::%loop-player%} : 0)
					set text of id "%{_sidebarID}%_LINE_7" to "&4&a▍ Your Kills: &f%{_playerKillsDisplay}%"
				else if {-gameSystem::gameMode} is "GAMEMODE_TEAMDEATHMATCH":
					set text of id "%{_sidebarID}%_LINE_8" to "&3&c▍ Red Kills: &f%{-gameSystem::teamKills::RED}%"
					set text of id "%{_sidebarID}%_LINE_7" to "&4&9▍ Blue Kills: &f%{-gameSystem::teamKills::BLUE}%"
			set text of id "%{_sidebarID}%_LINE_6" to "&3&f"
			set text of id "%{_sidebarID}%_LINE_5" to "&3&e▍ Level: &f%{-playerLoadedData::%loop-player%_CURRENT_LEVEL}%"
			set text of id "%{_sidebarID}%_LINE_4" to "&4&e▍ &e(&f%game_numberDisplayHandler_getNumberDisplay({-playerLoadedData::%loop-player%_LEVEL_UP_PROGRESS_EXP})% &e/ &f%game_numberDisplayHandler_getNumberDisplay({-playerLoadedData::%loop-player%_LEVEL_UP_REQUIRE_EXP})%&e) - &f%{-playerLoadedData::%loop-player%_LEVEL_UP_PROGRESS_PERCENTAGE}%%%"
			set text of id "%{_sidebarID}%_LINE_3" to "&5&e▍ Total Exp: &f%{-playerLoadedData::%loop-player%_TOTAL_EXP}%"
			set text of id "%{_sidebarID}%_LINE_2" to "&6&e▍ Credits: &f%{-playerLoadedData::%loop-player%_REMAIN_CREDITS}%"
			set text of id "%{_sidebarID}%_LINE_1" to "&4&f"

function game_playerDisplay_sendAllCurrentTeamPlayers():
	if {-gameSystem::gameMode} is "GAMEMODE_TEAMDEATHMATCH":
		send "%nl%&e[Team Players]%nl%&cRed Team: &f%game_gameTeams_getTeamPlayers(""RED"")%%nl%&9Blue Team: &f%game_gameTeams_getTeamPlayers(""BLUE"")%%nl%" to all players

function game_playerDisplay_playerRewardMessage(player: player, message: text):
	set {_rewardDisplay} to ""
	set {_rewardReasonSplit::*} to {_message} split by ""
	loop (amount of {_rewardReasonSplit::*}) times:
		set {_rewardDisplay} to "%{_rewardDisplay}%%{_rewardReasonSplit::%loop-number%}%"
		send title "&f" with subtitle {_rewardDisplay} to {_player} for 0.5 second with 0 tick fadein and 0 tick fadeout
		wait 1 tick

function game_playerDisplay_firingCooldown(player: player, cooldownTimeInSeconds: number):
	set {_cooldownDisplayPerTime} to ("%({_cooldownTimeInSeconds} / 10)% seconds" parsed as time span)
	loop 10 times:
		set level progress of {_player} to ((loop-number / 10) - 0.01)
		wait {_cooldownDisplayPerTime}
	set level progress of {_player} to 0

function game_playerDisplay_firingAmmo(player: player, gunID: text, gunName: text, gunStats: objects):
	set {_ammoID} to "%{_player}'s UUID%.%{_gunID}%"
	set {_gunNameDisplay} to (check [{_gunName} is set] ? "%uncolored {_gunName}% " : "")
	set {_currentAmmoDisplay} to (check [{-weaponAmmo::%{_ammoID}%} is set] ? {-weaponAmmo::%{_ammoID}%} : 0)
	set {_maximumAmmoDisplay} to (check [{_gunStats::10} is set] ? {_gunStats::10} : 0)
	if {-isReloading::%{_player}%} is set:
		set {_ammoDisplay} to "%{_currentAmmoDisplay}%/%{_maximumAmmoDisplay}% &c[Reloading]&e"
	else:
		set {_ammoDisplay} to "%{_currentAmmoDisplay}%/%{_maximumAmmoDisplay}%"
	send actionbar "&e%{_gunNameDisplay}%( %{_ammoDisplay}% )" to {_player}
	set {_player}'s level to {-weaponAmmo::%{_ammoID}%}

function game_playerDisplay_gunItem(player: player, inventorySlot: number):
	set {_gunInSlot} to (slot {_inventorySlot} of {_player}'s inventory)
	set {_gunID} to game_itemsHandler_getGunID({_gunInSlot})
	set {_ammoID} to "%{_player}'s UUID%.%{_gunID}%"
	set {_displayAmount} to (check [{-weaponAmmo::%{_ammoID}%} > 0] ? {-weaponAmmo::%{_ammoID}%} : 1)
	set slot {_inventorySlot} of {_player}'s inventory to {_displayAmount} of {_gunInSlot}

function game_playerDisplay_scopeDisplay(player: player):
	set {_pressID} to "%{_player}'s UUID%.RIGHT_BUTTON_DOWN"
	set {_playerTool} to {_player}'s tool
	set {_gunID} to game_itemsHandler_getGunID({_playerTool})
	set {_ammoID} to "%{_player}'s UUID%.%{_gunID}%"
	set {_oldAmmo} to {-weaponAmmo::%{_ammoID}%}
	send title "&f" with subtitle "&aLᴇғᴛ-Cʟɪᴄᴋ &eᴛᴏ &aFɪʀᴇ&e." to {_player} for 99999 seconds with 0 tick fadein and 0 tick fadeout
	while (true):
		if {-buttonPress::%{_pressID}%} is not set:
			exit 1 loop
		if {-weaponAmmo::%{_ammoID}%} is not {_oldAmmo}:
			exit 1 loop
		wait 4 ticks
	send title "&f" with subtitle "&f" to {_player} for 1 tick with 0 tick fadein and 0 tick fadeout

function game_playerDisplay_weaponDurability(player: player, inventorySlot: number, percentage: number):
	set {_playerItem} to slot {_inventorySlot} of {_player}'s inventory
	set {_maxDurability} to max durability of {_playerItem}
	set {_currentDurability} to ({_maxDurability} - ceil(({_percentage} / 100) * {_maxDurability}))
	set durability of {_playerItem} to {_currentDurability}
	set slot {_inventorySlot} of {_player}'s inventory to {_playerItem}

function game_playerDisplay_updateTablist(player: player):
	if {-gameSystem::playerKills::%{_player}%} and {-gameSystem::playerDeaths::%{_player}%} is set:
		set tablist name of ("%{_player}%" parsed as player) to "&6&l%{-playerLoadedData::%{_player}%_CURRENT_LEVEL}% &f%game_gameTeams_getTeamColor(game_gameTeams_getPlayerTeam({_player}), ""NAME"")%%{_player}% &6(&e%{-gameSystem::playerKills::%{_player}%}% - %{-gameSystem::playerDeaths::%{_player}%}%&6)"
	else:
		set tablist name of ("%{_player}%" parsed as player) to "&6&l%{-playerLoadedData::%{_player}%_CURRENT_LEVEL}% &e%{_player}%"

function game_playerDisplay_getPlayerPrefix(player: player) :: text:
	set {_playerUniquePrefix} to game_playerDisplay_getPlayerPrefix_checkPlayerUniquePrefix({_player})
	if {_playerUniquePrefix} is not "":
		return "&6[%{_playerUniquePrefix}%&6] "
	else if {_player} has permission "server.developer":
		return "&c[DEV] "
	else if {_player} has permission "server.administrator":
		return "&c[ADMIN] "
	else if {_player} has permission "server.support":
		return "&c[SUPPORT] "
	else:
		return "&e"

function game_playerDisplay_getPlayerPrefix_checkPlayerUniquePrefix(player: player) :: text:
	set {_playerPermissions::*} to {_player}'s permissions
	loop {_playerPermissions::*}:
		set {_loopPermissionSplit::*} to {_playerPermissions::%loop-index%} split by "."
		if "%{_loopPermissionSplit::1}%.%{_loopPermissionSplit::2}%" is "server.prefix":
			return {_loopPermissionSplit::3}
	return ""

function game_playerDisplay_exposePlayer(player: player, seconds: number):
	remove glowing from {_player}
	apply potion of glowing of tier 1 to {_player} for ("%{_seconds}% seconds" parsed as time span)