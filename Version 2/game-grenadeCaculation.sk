function game_grenadeCaculation_registerGrenade(player: player):
	set {_launchLocation} to ({_player}'s head)
	set {-grenadeCooldown::%{_player}%} to now
	game_playerDisplay_firingCooldown({_player}, 1)
	set {_pitchRemovedLaunchaLocation} to {_launchLocation}
	set {_pitchRemovedLaunchaLocation}'s pitch to 0
	spawn armor stand at ({_player}'s location)
	set {_grenade} to last spawned entity
	add "{Invisible:1b,NoBasePlate:1b,NoGravity:1b}" to entity-nbt of {_grenade}
	set armor stand helmet of {_grenade} to green stained clay
	loop (20 * 5 * 2) times:
		set {_x} to (((loop-number - 1) / 8) * (8 * cos({_launchLocation}'s pitch)))
		set {_y} to (({_launchLocation}'s y coords) + game_grenadeCaculation_getPositionHeight((check [{_pitchPercentage} > 0] ? 8 : -8), ({_launchLocation}'s pitch), ((loop-number - 1) / 8), 1))
		set {_xLocationRaw} to (location {_x} meters infront of {_pitchRemovedLaunchaLocation})
		set {_oldGrenadeLocation} to {_loopGrenadeLocation}
		set {_loopGrenadeLocation} to location at (({_xLocationRaw}'s x coords), {_y}, ({_xLocationRaw}'s z coords)) in ({_launchLocation}'s world)
		if block at {_loopGrenadeLocation} is not air:
			set {_grenadeExplodeDelay} to (101 - loop-number)
			exit 1 loop
#		drawDot particle "smokelarge", center {_loopGrenadeLocation}, visibleRange 100
		teleport {_grenade} to {_loopGrenadeLocation}
		if floor(loop-number / 2) is (loop-number / 2):
			wait 1 tick
	kill {_grenade}
	if {_grenadeExplodeDelay} is set:
		loop floor({_grenadeExplodeDelay} / 2) times:
			drawDot particle "smokelarge", center (location 0.7 meters above {_loopGrenadeLocation}), visibleRange 100
			wait ("2 ticks" parsed as time span)
	game_grenadeCaculation_grenadeExplosionDamage({_player}, {_oldGrenadeLocation}, 8, 200)
	kill {_grenade}
	drawDot particle "explosionhuge", center {_oldGrenadeLocation}, visibleRange 100
	game_grenadeCaculation_blockExplosionEffect({_oldGrenadeLocation})
	play sound "entity.generic.explode" with volume 4 and pitch 1 at {_oldGrenadeLocation} for all players

function game_grenadeCaculation_getPositionHeight(upwardSpeed: number, pitch: number, secondsPassed: number, gravityPerSecond: number = 9.8) :: number:
	return (({_upwardSpeed} * sin({_pitch})) * {_secondsPassed}) - (0.5 * {_gravityPerSecond} * ({_secondsPassed} ^ 2))

function game_grenadeCaculation_grenadeExplosionDamage(grenadeOwner: player, explodeLocation: location, explodeRange: number, maximumDamage: number):
	loop all players:
		if loop-player is {_grenadeOwner}:
			set {_invalidTarget} to true
		else if game_damageCaculation_IsVulnerable(loop-player) is false:
			set {_invalidTarget} to true
		else if (distance between {_explodeLocation} and loop-player) > {_explodeRange}:
			set {_invalidTarget} to true
		if {_invalidTarget} is not set:
			set {_damagePercentage} to (1 - ((distance between {_explodeLocation} and loop-player) / {_explodeRange}))
			set {_damagePercentage} to (check [{_damagePercentage} > 0.4] ? {_damagePercentage} : 0.4)
			game_damageCaculation_damagePlayer({_grenadeOwner}, loop-player, ({_maximumDamage} * {_damagePercentage}), "GRENADE_DAMAGE")
		delete {_invalidTarget}

function game_grenadeCaculation_blockExplosionEffect(location: location):
	set {_loopLocation} to {_location}
	loop 20 times:
		set {_loopLocation}'s yaw to (loop-number * 18 + 0.1)
		spawn armor stand at {_loopLocation}
		set {_loopEntity} to last spawned entity
		set {_headItems::*} to stone and grass and cobble stone and wood plank
		set helmet of {_loopEntity} to {_headItems::%(random integer between 1 and 4)%}
		add "{Invisible:1b,NoBasePlate:1b,Small:1b,DisabledSlots:1052688}" to entity-nbt of {_loopEntity}
		push {_loopEntity} upwards at speed (random number between 0 and 3)
		push {_loopEntity} forwards at speed (random number between 0 and 6)
		add {_loopEntity} to {_explosionEffectEntities::*}
	wait 3 seconds
	loop {_explosionEffectEntities::*}:
		kill {_explosionEffectEntities::%loop-index%}
	set {_debugAttempts} to 0
	while (true):
		wait 3 seconds
		add 1 to {_debugAttempts}
		set {_failedToKillEntity} to 0
		loop {_explosionEffectEntities::*}:
			if {_explosionEffectEntities::%loop-index%} is alive:
				add 1 to {_failedToKillEntity}
				kill {_explosionEffectEntities::%loop-index%}
		if {_failedToKillEntity} is 0:
			if {_debugAttempts} > 1:
				game_gameLogs_sendMessage("Grenade explosion effect debug system has successfully killed all entities after %({_debugAttempts} - 1)% attempts.")
			exit 1 loop
		game_gameLogs_sendMessage("Grenade explosion effect debug system has attempted to kill %{_failedToKillEntity}% entities.")

function game_grenadeCaculation_grenadeReady(player: player) :: boolean:
	if {-grenadeCooldown::%{_player}%} is not set:
		return true
	return (check [(difference between {-grenadeCooldown::%{_player}%} and now) > ("1 second" parsed as time span)])